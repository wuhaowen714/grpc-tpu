# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import inference_service_pb2 as inference__service__pb2


class InferenceServiceStub(object):
    """LMCS推理服务。

    该服务由一个python服务器实现，部署在算力机的镜像中，并可通过gRPC方式调用。测试可使用任何支持gRPC调用的工具，例如Postman:
    https://learning.postman.com/docs/sending-requests/grpc/grpc-request-interface/
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Complete = channel.unary_unary(
                '/com.sophgo.lmcs.inferenceservice.proto.InferenceService/Complete',
                request_serializer=inference__service__pb2.CreateCompletionRequest.SerializeToString,
                response_deserializer=inference__service__pb2.Completion.FromString,
                )
        self.StreamComplete = channel.unary_stream(
                '/com.sophgo.lmcs.inferenceservice.proto.InferenceService/StreamComplete',
                request_serializer=inference__service__pb2.CreateCompletionRequest.SerializeToString,
                response_deserializer=inference__service__pb2.Completion.FromString,
                )


class InferenceServiceServicer(object):
    """LMCS推理服务。

    该服务由一个python服务器实现，部署在算力机的镜像中，并可通过gRPC方式调用。测试可使用任何支持gRPC调用的工具，例如Postman:
    https://learning.postman.com/docs/sending-requests/grpc/grpc-request-interface/
    """

    def Complete(self, request, context):
        """推理接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamComplete(self, request, context):
        """流式推理接口
        客户端会收到多个请求，直到推理结束为止
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Complete': grpc.unary_unary_rpc_method_handler(
                    servicer.Complete,
                    request_deserializer=inference__service__pb2.CreateCompletionRequest.FromString,
                    response_serializer=inference__service__pb2.Completion.SerializeToString,
            ),
            'StreamComplete': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamComplete,
                    request_deserializer=inference__service__pb2.CreateCompletionRequest.FromString,
                    response_serializer=inference__service__pb2.Completion.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.sophgo.lmcs.inferenceservice.proto.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """LMCS推理服务。

    该服务由一个python服务器实现，部署在算力机的镜像中，并可通过gRPC方式调用。测试可使用任何支持gRPC调用的工具，例如Postman:
    https://learning.postman.com/docs/sending-requests/grpc/grpc-request-interface/
    """

    @staticmethod
    def Complete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.sophgo.lmcs.inferenceservice.proto.InferenceService/Complete',
            inference__service__pb2.CreateCompletionRequest.SerializeToString,
            inference__service__pb2.Completion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.sophgo.lmcs.inferenceservice.proto.InferenceService/StreamComplete',
            inference__service__pb2.CreateCompletionRequest.SerializeToString,
            inference__service__pb2.Completion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
